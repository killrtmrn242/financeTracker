const API_URL = "http://localhost:5000/api";

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—Ö–æ–¥–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
function toggleRegister() {
  const registerFields = document.getElementById("register-fields");
  const isRegistering = registerFields.style.display === "none";
  const registerBtn = document.getElementById("register-btn");

  registerFields.style.display = isRegistering ? "block" : "none";
  document.getElementById("auth-title").textContent = isRegistering ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" : "–í—Ö–æ–¥";
  document.getElementById("login-btn").style.display = isRegistering ? "none" : "inline-block";

  registerBtn.textContent = isRegistering ? "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è";
  registerBtn.setAttribute("onclick", isRegistering ? "register()" : "toggleRegister()");
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async function register() {
  const username = document.getElementById("username")?.value.trim();
  const password = document.getElementById("password")?.value.trim();
  const confirmPassword = document.getElementById("confirm-password")?.value.trim();

  if (!username || !password || !confirmPassword) {
    alert("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
    return;
  }

  if (password !== confirmPassword) {
    alert("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
    return;
  }

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", { username, password });

  try {
    const response = await fetch(`${API_URL}/auth/register`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });

    console.log("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status);
    const data = await response.json();
    console.log("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–¥–∞–Ω–Ω—ã–µ):", data);

    if (response.ok) {
      alert("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.");
      toggleRegister();
    } else {
      alert("‚ùå –û—à–∏–±–∫–∞: " + (data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞!");
  }
}

// –í—Ö–æ–¥
async function login() {
  const username = document.getElementById("username").value.trim();
  const password = document.getElementById("password").value.trim();

  if (!username || !password) {
    alert("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
    return;
  }

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥:", { username, password });

  try {
    const response = await fetch(`${API_URL}/auth/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });

    const data = await response.json();
    
    if (response.ok) {
      localStorage.setItem("token", data.token);
      showDashboard();
    } else {
      alert(data.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ (—Å–º–µ–Ω–∞ username)
async function updateUserName() {
  const newUsername = document.getElementById("new-username").value.trim();
  if (!newUsername) {
    alert("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω");
    return;
  }

  const token = localStorage.getItem("token");
  if (!token) {
    alert("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
    return;
  }

  try {
    const response = await fetch(`${API_URL}/auth/update-username`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({ newUsername }),
    });

    const data = await response.json();
    if (response.ok) {
      alert("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω: " + data.username);
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
      document.getElementById("profile-username").textContent = data.username;
      document.getElementById("new-username").value = "";
    } else {
      alert("‚ùå –û—à–∏–±–∫–∞: " + data.message);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã —Å–º–µ–Ω—ã –ª–æ–≥–∏–Ω–∞
function toggleUpdateUsername() {
    const form = document.getElementById("update-username-form");
    if (form.style.display === "none" || form.style.display === "") {
      form.style.display = "block";
    } else {
      form.style.display = "none";
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
  async function updateUserName() {
    const newUsername = document.getElementById("new-username").value.trim();
    if (!newUsername) {
      alert("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω");
      return;
    }
  
    const token = localStorage.getItem("token");
    if (!token) {
      alert("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
      return;
    }
  
    try {
      const response = await fetch(`${API_URL}/auth/update-username`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`
        },
        body: JSON.stringify({ newUsername })
      });
  
      const data = await response.json();
      if (response.ok) {
        alert("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω: " + data.username);
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ª–æ–≥–∏–Ω
        document.getElementById("profile-username").textContent = data.username;
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–º–µ–Ω—ã –ª–æ–≥–∏–Ω–∞ –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
        document.getElementById("update-username-form").style.display = "none";
        document.getElementById("new-username").value = "";
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞: " + data.message);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞:", error);
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞");
    }
  }
  

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
async function showDashboard() {
  document.getElementById("auth").style.display = "none";
  document.getElementById("dashboard").style.display = "block";

  const token = localStorage.getItem("token");
  if (!token) {
    document.getElementById("auth").style.display = "block";
    document.getElementById("dashboard").style.display = "none";
    return;
  }

  try {
    const response = await fetch(`${API_URL}/users/profile`, {
      method: "GET",
      headers: { "Authorization": `Bearer ${token}` },
    });
    const data = await response.json();
    if (response.ok) {
      document.getElementById("profile-username").textContent = data.username;
      loadTransactions();
    } else {
      logout();
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    logout();
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function addTransaction() {
  const token = localStorage.getItem("token");
  const amount = document.getElementById("amount").value;
  const type = document.getElementById("type").value;
  const category = document.getElementById("category").value;

  if (!amount || !category) {
    alert("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
    return;
  }

  try {
    const response = await fetch(`${API_URL}/transactions`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,
      },
      body: JSON.stringify({ amount, type, category }),
    });

    if (response.ok) {
      loadTransactions();
    } else {
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
  }
}

async function deleteTransaction(transactionId) {
  const token = localStorage.getItem("token");
  if (!token) {
    alert("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
    return;
  }
  try {
    const response = await fetch(`${API_URL}/transactions/${transactionId}`, {
      method: "DELETE",
      headers: {
        "Authorization": `Bearer ${token}`,
      },
    });
    const data = await response.json();
    if (response.ok) {
      alert("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞");
      loadTransactions(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    } else {
      alert("‚ùå –û—à–∏–±–∫–∞: " + data.message);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
  }
}


// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function loadTransactions() {
  const token = localStorage.getItem("token");
  try {
    const response = await fetch(`${API_URL}/transactions`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      }
    });
    const data = await response.json();
    if (response.ok) {
      const transactionsList = document.getElementById("transactions");
      transactionsList.innerHTML = "";
      
      let totalIncome = 0;
      let totalExpense = 0;
      
      data.forEach(tx => {
        const li = document.createElement("li");
        li.textContent = `${tx.type === "income" ? "‚ûï" : "‚ûñ"} ${tx.amount} —Ä—É–±. - ${tx.category}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const delBtn = document.createElement("button");
        delBtn.textContent = "–£–¥–∞–ª–∏—Ç—å";
        delBtn.style.marginLeft = "10px";
        delBtn.onclick = () => deleteTransaction(tx._id);
        li.appendChild(delBtn);
        transactionsList.appendChild(li);
        
        // –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
        if (tx.type === "income") {
          totalIncome += tx.amount;
        } else {
          totalExpense += tx.amount;
        }
      });
      
      const balance = totalIncome - totalExpense;
      
      document.getElementById("total-income").textContent = `–î–æ—Ö–æ–¥: ${totalIncome} —Ä—É–±.`;
      document.getElementById("total-expense").textContent = `–†–∞—Å—Ö–æ–¥: ${totalExpense} —Ä—É–±.`;
      document.getElementById("balance").textContent = `–ë–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±.`;
      
    } else {
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: " + data.message);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", error);
    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
  }
}


// –í—ã—Ö–æ–¥
function logout() {
  localStorage.removeItem("token");
  document.getElementById("auth").style.display = "block";
  document.getElementById("dashboard").style.display = "none";
}

window.onload = showDashboard;
