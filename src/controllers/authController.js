const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const registerUser = async (req, res) => {
  try {
    const { username, password } = req.body;
    console.log("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", { username, password });

    if (!username || !password) {
      return res.status(400).json({ message: "‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" });
    }

    const userExists = await User.findOne({ username });
    if (userExists) {
      return res.status(400).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    // –ù–µ —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é, —Ç–∞–∫ –∫–∞–∫ pre-hook –º–æ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    const user = new User({ username, password });
    await user.save();

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", user);
    res.status(201).json({ message: "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const loginUser = async (req, res) => {
  try {
    const { username, password } = req.body;
    console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω:", username);

    const user = await User.findOne({ username });
    if (!user) {
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    console.log("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:", password, "vs", user.password);
    const isMatch = await bcrypt.compare(password, user.password);
    console.log("‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π:", isMatch);

    if (!isMatch) {
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" });
    res.json({ token, user: { username: user.username } });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const updateUsername = async (req, res) => {
  try {
    const { newUsername } = req.body;
    const userId = req.user.id;
    console.log("üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ª–æ–≥–∏–Ω–∞:", { userId, newUsername });

    if (!newUsername) {
      return res.status(400).json({ message: "‚ùå –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (user.username === newUsername) {
      return res.status(400).json({ message: "‚ùå –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º" });
    }

    const usernameExists = await User.findOne({ username: newUsername });
    if (usernameExists) {
      return res.status(400).json({ message: "‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç" });
    }

    user.username = newUsername;
    await user.save();

    console.log("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω:", user);
    res.json({ message: "‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", username: newUsername });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–≥–∏–Ω–∞:", error);
    res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º
module.exports = {
  registerUser,
  loginUser,
  updateUsername,
};
